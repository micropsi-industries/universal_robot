<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="ur_robot_gazebo">
  <!--
    This is a top-level xacro instantiating the Gazebo-specific version of the
    'ur_robot' macro (ie: 'ur_robot_gazebo') with basic force/torque sensor and passing it values for all its
    required arguments 
  -->

  <!--
    Import main macro.

    NOTE: this imports the Gazebo-wrapper main macro, NOT the regular
          xacro macro (which is hosted by ur_description).
  -->
  <xacro:include filename="$(find ur_gazebo)/urdf/ur_macro.xacro" />
  <xacro:include filename="$(find ur_description)/urdf/inc/ur_common.xacro" />

  <!--Declare arguments -->
  <xacro:arg name="joint_limit_params" default="" />
  <xacro:arg name="physical_params" default="" />
  <xacro:arg name="kinematics_params" default="" />
  <xacro:arg name="visual_params" default="" />
  <xacro:arg name="ft_params" default="" />

  <!--
    legal values:
      - hardware_interface/PositionJointInterface
      - hardware_interface/VelocityJointInterface
      - hardware_interface/EffortJointInterface

    NOTE: this value must correspond to the controller configured in the
          controller .yaml files in the 'config' directory.
  -->
  <xacro:arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />
  <xacro:arg name="safety_limits" default="false" />
  <xacro:arg name="safety_pos_margin" default="0.15" />
  <xacro:arg name="safety_k_position" default="20" />

  <!-- Instantiate the Gazebo robot and pass it all the required arguments. -->
  <xacro:ur_robot_gazebo prefix="" joint_limits_parameters_file="$(arg joint_limit_params)" kinematics_parameters_file="$(arg kinematics_params)" physical_parameters_file="$(arg physical_params)" visual_parameters_file="$(arg visual_params)" transmission_hw_interface="$(arg transmission_hw_interface)" safety_limits="$(arg safety_limits)" safety_pos_margin="$(arg safety_pos_margin)" safety_k_position="$(arg safety_k_position)" />

  <!--
     TODO:  add ${prefix} to all following link, joint, and topic names, and resolve
   -->
  <!--
    Attach the Gazebo model to Gazebo's world frame.

    Note: if you're looking to integrate a UR into a larger scene and need
    to add EEFs or other parts, DO NOT change this file or the 'world' link
    here. Create a NEW xacro instead and decide whether you need to add
    a 'world' link there.
  -->
  <link name="world" />
  <joint name="world_joint" type="fixed">
    <parent link="world" />
    <child link="base_link" />
    <origin xyz="0 0 0" rpy="0 0 0" />
  </joint>

  <!-- 
    Force torque sensor link, joint, and Gazebo definition
  -->
  <xacro:property name="ft_config" value="${xacro.load_yaml('$(arg ft_params)')}"/>

  <link name="${ft_config['link']['name']}">
    <visual>
      <origin 
        xyz="${ft_config['link']['origin']['xyz']}"
        rpy="${ft_config['link']['origin']['rpy']}" />
      <geometry>
        <cylinder 
          radius="${ft_config['link']['radius']}" 
          length="${ft_config['link']['length']}" />
      </geometry>
    </visual>
    <collision>
      <origin 
        xyz="${ft_config['link']['origin']['xyz']}"
        rpy="${ft_config['link']['origin']['rpy']}" />
      <geometry>
        <cylinder 
          radius="${ft_config['link']['radius']}" 
          length="${ft_config['link']['length']}" />
      </geometry>
    </collision>
    <inertial>
      <mass value="${ft_config['link']['inertial']['mass']}" />
      <origin 
        xyz="${ft_config['link']['inertial']['origin']['xyz']}"
        rpy="${ft_config['link']['inertial']['origin']['rpy']}" />
      <inertia
        ixx="${ft_config['link']['inertial']['inertia']['ixx']}"
        ixy="${ft_config['link']['inertial']['inertia']['ixy']}"
        ixz="${ft_config['link']['inertial']['inertia']['ixz']}"
        iyy="${ft_config['link']['inertial']['inertia']['iyy']}"
        iyz="${ft_config['link']['inertial']['inertia']['iyz']}"
        izz="${ft_config['link']['inertial']['inertia']['izz']}" />
    </inertial>
  </link>

  <!-- Use revolute joint as Gazebo's internal URDF to SRDF convertion lumps fixed links in parent -->
  <joint name="${ft_config['joint']['name']}" type="revolute">
    <parent link="${ft_config['joint']['parent_link']}" />
    <child link="${ft_config['link']['name']}" />
    <origin 
        xyz="${ft_config['joint']['origin']['xyz']}"
        rpy="${ft_config['joint']['origin']['rpy']}" />
    <axis xyz="0 0 1" />
    <limit lower="0" upper="0" effort="0" velocity="0" />
    <dynamics damping="0" friction="0" />
  </joint>

  <!-- Disable collision with previous link -->
  <disable_collisions
    link1="${ft_config['link']['name']}"
    link2="${ft_config['joint']['parent_link']}"
    reason="Adjacent" />

  <!-- Enable Gazebo sensor on joint -->
  <gazebo 
    reference="${ft_config['joint']['name']}"
    pose="${ft_config['sensor']['pose']}"
    update_rate="${ft_config['sensor']['update_rate']}">
    <sensor name="ft_sensor" type="force_torque">
      <always_on>${ft_config['sensor']['always_on']}</always_on>
      <visualize>${ft_config['sensor']['visualize']}</visualize>
      <force_torque>
        <frame>sensor</frame>
        <measure_direction>${ft_config['sensor']['measure_direction']}</measure_direction>
      </force_torque>
    </sensor>
  </gazebo>

  <!-- Use gazebo_ros_pkgs ft_sensor library to publish ft_sensor_topic by referencing ft_sensor_joint -->
  <gazebo>
    <plugin name="${ft_config['sensor']['name']}_plugin" filename="libgazebo_ros_ft_sensor.so">
      <topicName>${ft_config['sensor']['topic_name']}</topicName>
      <jointName>${ft_config['joint']['name']}</jointName>
      <noise 
        type="${ft_config['sensor']['noise_type']}" 
        mean="${ft_config['sensor']['noise_mean']}" 
        stddev="${ft_config['sensor']['noise_stddev']}" />
    </plugin>
  </gazebo>
</robot>
